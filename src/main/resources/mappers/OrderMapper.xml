<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.paopao.dao.OrderMapper">
  <resultMap id="BaseResultMap" type="com.paopao.po.Order">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="order_no" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="shipping_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="payment" javaType="java.math.BigDecimal" jdbcType="DECIMAL" />
      <arg column="payment_type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="status" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="get_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="end_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="close_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, order_no, user_id, shipping_id, payment, payment_type, status, get_time, end_time, 
    close_time, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from paopao_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from paopao_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.paopao.po.Order">
    insert into paopao_order (id, order_no, user_id, 
      shipping_id, payment, payment_type, 
      status, get_time, end_time, 
      close_time, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{orderNo,jdbcType=BIGINT}, #{userId,jdbcType=INTEGER}, 
      #{shippingId,jdbcType=INTEGER}, #{payment,jdbcType=DECIMAL}, #{paymentType,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{getTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{closeTime,jdbcType=TIMESTAMP}, now(), now()
      )
  </insert>
  <insert id="insertSelective" parameterType="com.paopao.po.Order">
    insert into paopao_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="shippingId != null">
        shipping_id,
      </if>
      <if test="payment != null">
        payment,
      </if>
      <if test="paymentType != null">
        payment_type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="getTime != null">
        get_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="closeTime != null">
        close_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="shippingId != null">
        #{shippingId,jdbcType=INTEGER},
      </if>
      <if test="payment != null">
        #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        #{paymentType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="getTime != null">
        #{getTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null">
        #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        now(),
      </if>
      <if test="updateTime != null">
        now(),
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.paopao.po.Order">
    update paopao_order
    <set>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="shippingId != null">
        shipping_id = #{shippingId,jdbcType=INTEGER},
      </if>
      <if test="payment != null">
        payment = #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        payment_type = #{paymentType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="getTime != null">
        get_time = #{getTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null">
        close_time = #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = now(),
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.paopao.po.Order">
    update paopao_order
    set order_no = #{orderNo,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=INTEGER},
      shipping_id = #{shippingId,jdbcType=INTEGER},
      payment = #{payment,jdbcType=DECIMAL},
      payment_type = #{paymentType,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      get_time = #{getTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      close_time = #{closeTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = now()
    where id = #{id,jdbcType=INTEGER}
  </update>


  <update id="updateByOrderNo" parameterType="com.paopao.po.Order">
    update paopao_order
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="shippingId != null">
        shipping_id = #{shippingId,jdbcType=INTEGER},
      </if>
      <if test="payment != null">
        payment = #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        payment_type = #{paymentType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="getTime != null">
        get_time = #{getTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null">
        close_time = #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = now(),
      </if>
    </set>
    where order_no=#{orderNo}
  </update>


  <select id="selectByUserIdAndOrderNo" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    where order_no=#{orderNo}
    and user_id=#{userId}
  </select>

  <select id="selectByOrderNo" resultMap="BaseResultMap" parameterType="long">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    where order_no = #{orderNo}
  </select>

  <select id="selectByUserId" resultMap="BaseResultMap" parameterType="int">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    where user_id = #{userId}
    order by create_time desc
    limit #{begin}, #{offset}
  </select>


  <select id="selectAllOrder" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    ORDER by create_time DESC
    limit #{begin}, #{offset}
  </select>

  <update id="closeOrderByOrderId" parameterType="int" >
    UPDATE paopao_order
    SET status = 0,
    update_time = now()
    where id = #{id}
  </update>

  <select id="countAll" resultType="int">
    select count(*)
    from paopao_order
  </select>

  <select id="countByUserIdStatus" parameterType="int" resultType="int">
    select count(*)
    from paopao_order
    <where>
      <if test="userId != null">
        and user_id=#{userId}
      </if>
      <if test="status != null">
        and status=#{status}
      </if>
    </where>
  </select>


  <select id="selectByUserIdDateStatus" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    <where>
      <if test="status != null">
        and status = #{status}
      </if>

      <if test="begin!=null ">
        <![CDATA[
       and create_time >= #{begin}
       ]]>
      </if>
      <if test="end!=null ">
        <![CDATA[
       and create_time <= #{end}
       ]]>
      </if>
    </where>
    order by create_time desc
  </select>

  <select id="selectByShippingIds" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    WHERE shipping_id in
    <foreach collection="shippingIdList" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="selectByShippingId" parameterType="int" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from paopao_order
    where shipping_id=#{shippingId}
  </select>

  <delete id="deleteByOrderNo" parameterType="long">
    delete from paopao_order
    where order_no=#{orderNo}
  </delete>


</mapper>